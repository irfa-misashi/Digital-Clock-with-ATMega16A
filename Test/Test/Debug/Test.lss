
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  00000f9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000166b  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8f  00000000  00000000  000027c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f10  00000000  00000000  00003252  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00004164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ffb  00000000  00000000  000049cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000059c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_1>
   8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_18>
  4c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4c 05 	call	0xa98	; 0xa98 <main>
  74:	0c 94 92 07 	jmp	0xf24	; 0xf24 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <clock_write>:
#include "clock.h"
#include "LCD.h"
#define F_CPU 11059200
#include <avr/delay.h>

void clock_write(BYTE hr, BYTE min, BYTE sec){
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	f6 2e       	mov	r15, r22
  8a:	04 2f       	mov	r16, r20
	BYTE hr0,hr1,min0,min1,sec0,sec1;
	
	hr1 = hr%10;
  8c:	cd ec       	ldi	r28, 0xCD	; 205
  8e:	8c 9f       	mul	r24, r28
  90:	11 2d       	mov	r17, r1
  92:	11 24       	eor	r1, r1
  94:	16 95       	lsr	r17
  96:	16 95       	lsr	r17
  98:	16 95       	lsr	r17
  9a:	11 0f       	add	r17, r17
  9c:	91 2f       	mov	r25, r17
  9e:	99 0f       	add	r25, r25
  a0:	99 0f       	add	r25, r25
  a2:	19 0f       	add	r17, r25
  a4:	98 2f       	mov	r25, r24
  a6:	91 1b       	sub	r25, r17
  a8:	19 2f       	mov	r17, r25
	hr0 = hr/10.0;
  aa:	68 2f       	mov	r22, r24
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatsisf>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	40 e2       	ldi	r20, 0x20	; 32
  bc:	51 e4       	ldi	r21, 0x41	; 65
  be:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3>
  c2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fixunssfsi>
  c6:	e6 2e       	mov	r14, r22

	min1 = min%10;
  c8:	fc 9e       	mul	r15, r28
  ca:	d1 2d       	mov	r29, r1
  cc:	11 24       	eor	r1, r1
  ce:	d6 95       	lsr	r29
  d0:	d6 95       	lsr	r29
  d2:	d6 95       	lsr	r29
  d4:	dd 0f       	add	r29, r29
  d6:	8d 2f       	mov	r24, r29
  d8:	88 0f       	add	r24, r24
  da:	88 0f       	add	r24, r24
  dc:	d8 0f       	add	r29, r24
  de:	8f 2d       	mov	r24, r15
  e0:	8d 1b       	sub	r24, r29
  e2:	d8 2f       	mov	r29, r24
	min0 = min/10.0;
  e4:	6f 2d       	mov	r22, r15
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatsisf>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	40 e2       	ldi	r20, 0x20	; 32
  f6:	51 e4       	ldi	r21, 0x41	; 65
  f8:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3>
  fc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fixunssfsi>
 100:	f6 2e       	mov	r15, r22

	sec1 = sec%10;
 102:	0c 9f       	mul	r16, r28
 104:	c1 2d       	mov	r28, r1
 106:	11 24       	eor	r1, r1
 108:	c6 95       	lsr	r28
 10a:	c6 95       	lsr	r28
 10c:	c6 95       	lsr	r28
 10e:	cc 0f       	add	r28, r28
 110:	8c 2f       	mov	r24, r28
 112:	88 0f       	add	r24, r24
 114:	88 0f       	add	r24, r24
 116:	c8 0f       	add	r28, r24
 118:	90 2f       	mov	r25, r16
 11a:	9c 1b       	sub	r25, r28
 11c:	c9 2f       	mov	r28, r25
	sec0 = sec/10.0;
 11e:	60 2f       	mov	r22, r16
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatsisf>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	40 e2       	ldi	r20, 0x20	; 32
 130:	51 e4       	ldi	r21, 0x41	; 65
 132:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3>
 136:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fixunssfsi>
 13a:	06 2f       	mov	r16, r22
	min0+=48;
	min1+=48;
	sec0+=48;
	sec1+=48;	
	
	LCD_startfrom(1,1);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_startfrom>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	86 e6       	ldi	r24, 0x66	; 102
 146:	90 e2       	ldi	r25, 0x20	; 32
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <clock_write+0xcc>
 14c:	00 00       	nop
	_delay_ms(3);
	LCD_write_char(hr0);
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	8e 0d       	add	r24, r14
 152:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(hr1);
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	81 0f       	add	r24, r17
 15a:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(':');
 15e:	8a e3       	ldi	r24, 0x3A	; 58
 160:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(min0);
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	8f 0d       	add	r24, r15
 168:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(min1);
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	8d 0f       	add	r24, r29
 170:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(':');
 174:	8a e3       	ldi	r24, 0x3A	; 58
 176:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(sec0);
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	80 0f       	add	r24, r16
 17e:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(sec1);
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	8c 0f       	add	r24, r28
 186:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
 18a:	89 e9       	ldi	r24, 0x99	; 153
 18c:	95 e1       	ldi	r25, 0x15	; 21
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <clock_write+0x112>
 192:	00 c0       	rjmp	.+0      	; 0x194 <clock_write+0x118>
	_delay_ms(2);
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	08 95       	ret

000001a2 <date_write>:

void date_write(BYTE day , BYTE month , unsigned int year){
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	f6 2e       	mov	r15, r22
 1b8:	8a 01       	movw	r16, r20
	BYTE day0,day1,month0,month1,year0,year1,year2,year3;
	
	day1 = day%10;
 1ba:	cd ec       	ldi	r28, 0xCD	; 205
 1bc:	8c 9f       	mul	r24, r28
 1be:	d1 2d       	mov	r29, r1
 1c0:	11 24       	eor	r1, r1
 1c2:	d6 95       	lsr	r29
 1c4:	d6 95       	lsr	r29
 1c6:	d6 95       	lsr	r29
 1c8:	dd 0f       	add	r29, r29
 1ca:	9d 2f       	mov	r25, r29
 1cc:	99 0f       	add	r25, r25
 1ce:	99 0f       	add	r25, r25
 1d0:	d9 0f       	add	r29, r25
 1d2:	98 2f       	mov	r25, r24
 1d4:	9d 1b       	sub	r25, r29
 1d6:	d9 2f       	mov	r29, r25
	day0 = day/10.0;
 1d8:	68 2f       	mov	r22, r24
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatsisf>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 e2       	ldi	r20, 0x20	; 32
 1ea:	51 e4       	ldi	r21, 0x41	; 65
 1ec:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3>
 1f0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fixunssfsi>
 1f4:	d6 2e       	mov	r13, r22
	
	month1 = month%10;
 1f6:	fc 9e       	mul	r15, r28
 1f8:	c1 2d       	mov	r28, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	c6 95       	lsr	r28
 1fe:	c6 95       	lsr	r28
 200:	c6 95       	lsr	r28
 202:	cc 0f       	add	r28, r28
 204:	8c 2f       	mov	r24, r28
 206:	88 0f       	add	r24, r24
 208:	88 0f       	add	r24, r24
 20a:	c8 0f       	add	r28, r24
 20c:	8f 2d       	mov	r24, r15
 20e:	8c 1b       	sub	r24, r28
 210:	c8 2f       	mov	r28, r24
	month0 = month/10.0;
 212:	6f 2d       	mov	r22, r15
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 f7 06 	call	0xdee	; 0xdee <__floatsisf>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	40 e2       	ldi	r20, 0x20	; 32
 224:	51 e4       	ldi	r21, 0x41	; 65
 226:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3>
 22a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fixunssfsi>
 22e:	b6 2e       	mov	r11, r22
	
	year0 = year / 1000.0;
 230:	b8 01       	movw	r22, r16
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 f5 06 	call	0xdea	; 0xdea <__floatunsisf>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	4a e7       	ldi	r20, 0x7A	; 122
 240:	54 e4       	ldi	r21, 0x44	; 68
 242:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3>
 246:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fixunssfsi>
 24a:	c6 2e       	mov	r12, r22
	year1 = (year%1000) / 100.0;
 24c:	98 01       	movw	r18, r16
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	36 95       	lsr	r19
 254:	27 95       	ror	r18
 256:	36 95       	lsr	r19
 258:	27 95       	ror	r18
 25a:	a5 ec       	ldi	r26, 0xC5	; 197
 25c:	b0 e2       	ldi	r27, 0x20	; 32
 25e:	0e 94 83 07 	call	0xf06	; 0xf06 <__umulhisi3>
 262:	92 95       	swap	r25
 264:	82 95       	swap	r24
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	89 27       	eor	r24, r25
 26a:	9f 70       	andi	r25, 0x0F	; 15
 26c:	89 27       	eor	r24, r25
 26e:	48 ee       	ldi	r20, 0xE8	; 232
 270:	53 e0       	ldi	r21, 0x03	; 3
 272:	84 9f       	mul	r24, r20
 274:	90 01       	movw	r18, r0
 276:	85 9f       	mul	r24, r21
 278:	30 0d       	add	r19, r0
 27a:	94 9f       	mul	r25, r20
 27c:	30 0d       	add	r19, r0
 27e:	11 24       	eor	r1, r1
 280:	b8 01       	movw	r22, r16
 282:	62 1b       	sub	r22, r18
 284:	73 0b       	sbc	r23, r19
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 f5 06 	call	0xdea	; 0xdea <__floatunsisf>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	48 ec       	ldi	r20, 0xC8	; 200
 294:	52 e4       	ldi	r21, 0x42	; 66
 296:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3>
 29a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fixunssfsi>
 29e:	a6 2e       	mov	r10, r22
	year2 = (year%100) / 10;
 2a0:	98 01       	movw	r18, r16
 2a2:	36 95       	lsr	r19
 2a4:	27 95       	ror	r18
 2a6:	36 95       	lsr	r19
 2a8:	27 95       	ror	r18
 2aa:	ab e7       	ldi	r26, 0x7B	; 123
 2ac:	b4 e1       	ldi	r27, 0x14	; 20
 2ae:	0e 94 83 07 	call	0xf06	; 0xf06 <__umulhisi3>
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	44 e6       	ldi	r20, 0x64	; 100
 2b8:	48 9f       	mul	r20, r24
 2ba:	90 01       	movw	r18, r0
 2bc:	49 9f       	mul	r20, r25
 2be:	30 0d       	add	r19, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	c8 01       	movw	r24, r16
 2c4:	82 1b       	sub	r24, r18
 2c6:	93 0b       	sbc	r25, r19
 2c8:	9c 01       	movw	r18, r24
 2ca:	ad ec       	ldi	r26, 0xCD	; 205
 2cc:	bc ec       	ldi	r27, 0xCC	; 204
 2ce:	0e 94 83 07 	call	0xf06	; 0xf06 <__umulhisi3>
 2d2:	7c 01       	movw	r14, r24
 2d4:	f6 94       	lsr	r15
 2d6:	e7 94       	ror	r14
 2d8:	f6 94       	lsr	r15
 2da:	e7 94       	ror	r14
 2dc:	f6 94       	lsr	r15
 2de:	e7 94       	ror	r14
	year3 = year%10;
 2e0:	98 01       	movw	r18, r16
 2e2:	0e 94 83 07 	call	0xf06	; 0xf06 <__umulhisi3>
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	9c 01       	movw	r18, r24
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	82 0f       	add	r24, r18
 306:	93 1f       	adc	r25, r19
 308:	08 1b       	sub	r16, r24
 30a:	19 0b       	sbc	r17, r25
	year0+=48;
	year1+=48;
	year2+=48;
	year3+=48;
	
	LCD_startfrom(2,1);
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_startfrom>
 314:	86 e6       	ldi	r24, 0x66	; 102
 316:	90 e2       	ldi	r25, 0x20	; 32
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <date_write+0x176>
 31c:	00 00       	nop
	_delay_ms(3);
	LCD_write_char(day0);
 31e:	80 e3       	ldi	r24, 0x30	; 48
 320:	8d 0d       	add	r24, r13
 322:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(day1);
 326:	80 e3       	ldi	r24, 0x30	; 48
 328:	8d 0f       	add	r24, r29
 32a:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char('/');
 32e:	8f e2       	ldi	r24, 0x2F	; 47
 330:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(month0);
 334:	80 e3       	ldi	r24, 0x30	; 48
 336:	8b 0d       	add	r24, r11
 338:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(month1);	
 33c:	80 e3       	ldi	r24, 0x30	; 48
 33e:	8c 0f       	add	r24, r28
 340:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char('/');
 344:	8f e2       	ldi	r24, 0x2F	; 47
 346:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(year0);
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	8c 0d       	add	r24, r12
 34e:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(year1);
 352:	80 e3       	ldi	r24, 0x30	; 48
 354:	8a 0d       	add	r24, r10
 356:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(year2);
 35a:	80 e3       	ldi	r24, 0x30	; 48
 35c:	8e 0d       	add	r24, r14
 35e:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
	LCD_write_char(year3);
 362:	80 e3       	ldi	r24, 0x30	; 48
 364:	80 0f       	add	r24, r16
 366:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_write_char>
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	bf 90       	pop	r11
 37c:	af 90       	pop	r10
 37e:	08 95       	ret

00000380 <pin_mode>:
#define LOW 0


void pin_mode (char port , BYTE pin , BYTE mode)
{
	switch (port)
 380:	82 34       	cpi	r24, 0x42	; 66
 382:	29 f1       	breq	.+74     	; 0x3ce <pin_mode+0x4e>
 384:	18 f4       	brcc	.+6      	; 0x38c <pin_mode+0xc>
 386:	81 34       	cpi	r24, 0x41	; 65
 388:	39 f0       	breq	.+14     	; 0x398 <pin_mode+0x18>
 38a:	08 95       	ret
 38c:	83 34       	cpi	r24, 0x43	; 67
 38e:	d1 f1       	breq	.+116    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 390:	84 34       	cpi	r24, 0x44	; 68
 392:	09 f4       	brne	.+2      	; 0x396 <pin_mode+0x16>
 394:	52 c0       	rjmp	.+164    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 396:	08 95       	ret
	{
		case 'A':
		{
			if (mode == OUTPUT) DDRA |= (1<<pin);
 398:	41 30       	cpi	r20, 0x01	; 1
 39a:	59 f4       	brne	.+22     	; 0x3b2 <pin_mode+0x32>
 39c:	2a b3       	in	r18, 0x1a	; 26
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <pin_mode+0x28>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <pin_mode+0x24>
 3ac:	82 2b       	or	r24, r18
 3ae:	8a bb       	out	0x1a, r24	; 26
 3b0:	08 95       	ret
			else if (mode == INPUT) DDRA &= ~(1<<pin);
 3b2:	41 11       	cpse	r20, r1
 3b4:	5c c0       	rjmp	.+184    	; 0x46e <__stack+0xf>
 3b6:	2a b3       	in	r18, 0x1a	; 26
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <pin_mode+0x42>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <pin_mode+0x3e>
 3c6:	80 95       	com	r24
 3c8:	82 23       	and	r24, r18
 3ca:	8a bb       	out	0x1a, r24	; 26
 3cc:	08 95       	ret
			break;
		}
		case 'B':
		{
			if (mode == OUTPUT) DDRB |= (1<<pin);
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	59 f4       	brne	.+22     	; 0x3e8 <pin_mode+0x68>
 3d2:	27 b3       	in	r18, 0x17	; 23
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <pin_mode+0x5e>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <pin_mode+0x5a>
 3e2:	82 2b       	or	r24, r18
 3e4:	87 bb       	out	0x17, r24	; 23
 3e6:	08 95       	ret
			else if (mode == INPUT) DDRB &= ~(1<<pin);
 3e8:	41 11       	cpse	r20, r1
 3ea:	41 c0       	rjmp	.+130    	; 0x46e <__stack+0xf>
 3ec:	27 b3       	in	r18, 0x17	; 23
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <pin_mode+0x78>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <pin_mode+0x74>
 3fc:	80 95       	com	r24
 3fe:	82 23       	and	r24, r18
 400:	87 bb       	out	0x17, r24	; 23
 402:	08 95       	ret
			break;
		}
		case 'C':
		{
			if (mode == OUTPUT) DDRC |= (1<<pin);
 404:	41 30       	cpi	r20, 0x01	; 1
 406:	59 f4       	brne	.+22     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 408:	24 b3       	in	r18, 0x14	; 20
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	82 2b       	or	r24, r18
 41a:	84 bb       	out	0x14, r24	; 20
 41c:	08 95       	ret
			else if (mode == INPUT) DDRC &= ~(1<<pin);
 41e:	41 11       	cpse	r20, r1
 420:	26 c0       	rjmp	.+76     	; 0x46e <__stack+0xf>
 422:	24 b3       	in	r18, 0x14	; 20
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	80 95       	com	r24
 434:	82 23       	and	r24, r18
 436:	84 bb       	out	0x14, r24	; 20
 438:	08 95       	ret
			break;
		}
		case 'D':
		{
			if (mode == OUTPUT) DDRD |= (1<<pin);
 43a:	41 30       	cpi	r20, 0x01	; 1
 43c:	59 f4       	brne	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 43e:	21 b3       	in	r18, 0x11	; 17
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	82 2b       	or	r24, r18
 450:	81 bb       	out	0x11, r24	; 17
 452:	08 95       	ret
			else if (mode == INPUT) DDRD &= ~(1<<pin);
 454:	41 11       	cpse	r20, r1
 456:	0b c0       	rjmp	.+22     	; 0x46e <__stack+0xf>
 458:	21 b3       	in	r18, 0x11	; 17
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__stack+0x5>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__stack+0x1>
 468:	80 95       	com	r24
 46a:	82 23       	and	r24, r18
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	08 95       	ret

00000470 <pin_write>:
	}	
}

void pin_write (char port , BYTE pin ,BYTE value)
{
	switch(port)
 470:	82 34       	cpi	r24, 0x42	; 66
 472:	29 f1       	breq	.+74     	; 0x4be <pin_write+0x4e>
 474:	18 f4       	brcc	.+6      	; 0x47c <pin_write+0xc>
 476:	81 34       	cpi	r24, 0x41	; 65
 478:	39 f0       	breq	.+14     	; 0x488 <pin_write+0x18>
 47a:	08 95       	ret
 47c:	83 34       	cpi	r24, 0x43	; 67
 47e:	d1 f1       	breq	.+116    	; 0x4f4 <pin_write+0x84>
 480:	84 34       	cpi	r24, 0x44	; 68
 482:	09 f4       	brne	.+2      	; 0x486 <pin_write+0x16>
 484:	52 c0       	rjmp	.+164    	; 0x52a <pin_write+0xba>
 486:	08 95       	ret
	{
		case 'A':
		{
			if(value == HIGH) PORTA |= (1<<pin);
 488:	41 30       	cpi	r20, 0x01	; 1
 48a:	59 f4       	brne	.+22     	; 0x4a2 <pin_write+0x32>
 48c:	2b b3       	in	r18, 0x1b	; 27
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <pin_write+0x28>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <pin_write+0x24>
 49c:	82 2b       	or	r24, r18
 49e:	8b bb       	out	0x1b, r24	; 27
 4a0:	08 95       	ret
			else if (value == LOW) PORTA &= ~(1<<pin);
 4a2:	41 11       	cpse	r20, r1
 4a4:	5c c0       	rjmp	.+184    	; 0x55e <pin_write+0xee>
 4a6:	2b b3       	in	r18, 0x1b	; 27
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <pin_write+0x42>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <pin_write+0x3e>
 4b6:	80 95       	com	r24
 4b8:	82 23       	and	r24, r18
 4ba:	8b bb       	out	0x1b, r24	; 27
 4bc:	08 95       	ret
			break;
		}
		case 'B':
		{
			if(value == HIGH) PORTB |= (1<<pin);
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	59 f4       	brne	.+22     	; 0x4d8 <pin_write+0x68>
 4c2:	28 b3       	in	r18, 0x18	; 24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <pin_write+0x5e>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <pin_write+0x5a>
 4d2:	82 2b       	or	r24, r18
 4d4:	88 bb       	out	0x18, r24	; 24
 4d6:	08 95       	ret
			else if (value == LOW) PORTB &= ~(1<<pin);
 4d8:	41 11       	cpse	r20, r1
 4da:	41 c0       	rjmp	.+130    	; 0x55e <pin_write+0xee>
 4dc:	28 b3       	in	r18, 0x18	; 24
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <pin_write+0x78>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <pin_write+0x74>
 4ec:	80 95       	com	r24
 4ee:	82 23       	and	r24, r18
 4f0:	88 bb       	out	0x18, r24	; 24
 4f2:	08 95       	ret
			break;
		}
		case 'C':
		{
			if(value == HIGH) PORTC |= (1<<pin);
 4f4:	41 30       	cpi	r20, 0x01	; 1
 4f6:	59 f4       	brne	.+22     	; 0x50e <pin_write+0x9e>
 4f8:	25 b3       	in	r18, 0x15	; 21
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <pin_write+0x94>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <pin_write+0x90>
 508:	82 2b       	or	r24, r18
 50a:	85 bb       	out	0x15, r24	; 21
 50c:	08 95       	ret
			else if (value == LOW) PORTC &= ~(1<<pin);
 50e:	41 11       	cpse	r20, r1
 510:	26 c0       	rjmp	.+76     	; 0x55e <pin_write+0xee>
 512:	25 b3       	in	r18, 0x15	; 21
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <pin_write+0xae>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <pin_write+0xaa>
 522:	80 95       	com	r24
 524:	82 23       	and	r24, r18
 526:	85 bb       	out	0x15, r24	; 21
 528:	08 95       	ret
			break;
		}
		case 'D':
		{
			if(value == HIGH) PORTD |= (1<<pin);
 52a:	41 30       	cpi	r20, 0x01	; 1
 52c:	59 f4       	brne	.+22     	; 0x544 <pin_write+0xd4>
 52e:	22 b3       	in	r18, 0x12	; 18
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <pin_write+0xca>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <pin_write+0xc6>
 53e:	82 2b       	or	r24, r18
 540:	82 bb       	out	0x12, r24	; 18
 542:	08 95       	ret
			else if (value == LOW) PORTD &= ~(1<<pin);
 544:	41 11       	cpse	r20, r1
 546:	0b c0       	rjmp	.+22     	; 0x55e <pin_write+0xee>
 548:	22 b3       	in	r18, 0x12	; 18
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <pin_write+0xe4>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <pin_write+0xe0>
 558:	80 95       	com	r24
 55a:	82 23       	and	r24, r18
 55c:	82 bb       	out	0x12, r24	; 18
 55e:	08 95       	ret

00000560 <port_write>:
		}						
	}	
}

void port_write (char port , BYTE value){
	switch(port){
 560:	82 34       	cpi	r24, 0x42	; 66
 562:	51 f0       	breq	.+20     	; 0x578 <port_write+0x18>
 564:	18 f4       	brcc	.+6      	; 0x56c <port_write+0xc>
 566:	81 34       	cpi	r24, 0x41	; 65
 568:	31 f0       	breq	.+12     	; 0x576 <port_write+0x16>
 56a:	08 95       	ret
 56c:	83 34       	cpi	r24, 0x43	; 67
 56e:	29 f0       	breq	.+10     	; 0x57a <port_write+0x1a>
 570:	84 34       	cpi	r24, 0x44	; 68
 572:	21 f0       	breq	.+8      	; 0x57c <port_write+0x1c>
 574:	08 95       	ret
		case 'A': PORTA = value;
 576:	6b bb       	out	0x1b, r22	; 27
		case 'B': PORTB = value;
 578:	68 bb       	out	0x18, r22	; 24
		case 'C': PORTC = value;
 57a:	65 bb       	out	0x15, r22	; 21
		case 'D': PORTD = value;
 57c:	62 bb       	out	0x12, r22	; 18
 57e:	08 95       	ret

00000580 <__vector_1>:
extern BYTE DAY;
extern BYTE MONTH;
extern unsigned int YEAR;

// Mode Bottom
ISR(INT0_vect){
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
		* MODE 3 IS EDITING SECONDS
		* MODE 4 IS EDITING DAYS
		* MODE 5 IS EDITING MONTHS
		* MODE 6 IS EDITING YEARS
	*/
	if(mode == 6) {mode = 0;}
 5a2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 5a6:	86 30       	cpi	r24, 0x06	; 6
 5a8:	19 f4       	brne	.+6      	; 0x5b0 <__vector_1+0x30>
 5aa:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <mode>
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <__vector_1+0x36>
	else {mode++;}
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <mode>
	clock_write(HR , MIN , SEC);
 5b6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 5ba:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 5be:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 5c2:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
	date_write(DAY , MONTH, YEAR);
 5c6:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 5ca:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 5ce:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 5d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 5d6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
	
}
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <__vector_2>:

// Increment Bottom
ISR(INT1_vect){
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	2f 93       	push	r18
 608:	3f 93       	push	r19
 60a:	4f 93       	push	r20
 60c:	5f 93       	push	r21
 60e:	6f 93       	push	r22
 610:	7f 93       	push	r23
 612:	8f 93       	push	r24
 614:	9f 93       	push	r25
 616:	af 93       	push	r26
 618:	bf 93       	push	r27
 61a:	ef 93       	push	r30
 61c:	ff 93       	push	r31
	// increasing hours
	if(mode == 1){ 
 61e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	a1 f4       	brne	.+40     	; 0x64e <__vector_2+0x52>
		if(HR == 12) {HR = 1;}
 626:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 62a:	8c 30       	cpi	r24, 0x0C	; 12
 62c:	21 f4       	brne	.+8      	; 0x636 <__vector_2+0x3a>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <HR>
 634:	03 c0       	rjmp	.+6      	; 0x63c <__vector_2+0x40>
		else {HR++;}
 636:	8f 5f       	subi	r24, 0xFF	; 255
 638:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <HR>
		clock_write(HR , MIN , SEC);
 63c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 640:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 644:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 648:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
 64c:	89 c0       	rjmp	.+274    	; 0x760 <__vector_2+0x164>
	}
	// increasing minuets 
	else if(mode == 2){
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	99 f4       	brne	.+38     	; 0x678 <__vector_2+0x7c>
		if(MIN == 59) {MIN = 0;}
 652:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <MIN>
 656:	8b 33       	cpi	r24, 0x3B	; 59
 658:	19 f4       	brne	.+6      	; 0x660 <__vector_2+0x64>
 65a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <MIN>
 65e:	03 c0       	rjmp	.+6      	; 0x666 <__vector_2+0x6a>
		else {MIN++;}
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <MIN>
		clock_write(HR , MIN , SEC); 
 666:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 66a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 66e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 672:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
 676:	74 c0       	rjmp	.+232    	; 0x760 <__vector_2+0x164>
	}
	// increasing seconds
	else if(mode == 3){
 678:	83 30       	cpi	r24, 0x03	; 3
 67a:	99 f4       	brne	.+38     	; 0x6a2 <__vector_2+0xa6>
		if(SEC == 59) {SEC = 0;}
 67c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SEC>
 680:	8b 33       	cpi	r24, 0x3B	; 59
 682:	19 f4       	brne	.+6      	; 0x68a <__vector_2+0x8e>
 684:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <SEC>
 688:	03 c0       	rjmp	.+6      	; 0x690 <__vector_2+0x94>
		else {SEC++;}
 68a:	8f 5f       	subi	r24, 0xFF	; 255
 68c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SEC>
		clock_write(HR , MIN , SEC);		
 690:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 694:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 698:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 69c:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
 6a0:	5f c0       	rjmp	.+190    	; 0x760 <__vector_2+0x164>
	}
	// increasing days
	else if(mode == 4){
 6a2:	84 30       	cpi	r24, 0x04	; 4
 6a4:	99 f5       	brne	.+102    	; 0x70c <__vector_2+0x110>
		BYTE max_days;
		if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) max_days = 31;
 6a6:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 6aa:	86 2f       	mov	r24, r22
 6ac:	8d 7f       	andi	r24, 0xFD	; 253
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	71 f0       	breq	.+28     	; 0x6ce <__vector_2+0xd2>
 6b2:	65 30       	cpi	r22, 0x05	; 5
 6b4:	71 f0       	breq	.+28     	; 0x6d2 <__vector_2+0xd6>
 6b6:	89 ef       	ldi	r24, 0xF9	; 249
 6b8:	86 0f       	add	r24, r22
 6ba:	82 30       	cpi	r24, 0x02	; 2
 6bc:	60 f0       	brcs	.+24     	; 0x6d6 <__vector_2+0xda>
 6be:	6a 30       	cpi	r22, 0x0A	; 10
 6c0:	61 f0       	breq	.+24     	; 0x6da <__vector_2+0xde>
 6c2:	6c 30       	cpi	r22, 0x0C	; 12
 6c4:	61 f0       	breq	.+24     	; 0x6de <__vector_2+0xe2>
		else if (MONTH == 2) max_days = 28;
 6c6:	62 30       	cpi	r22, 0x02	; 2
 6c8:	61 f0       	breq	.+24     	; 0x6e2 <__vector_2+0xe6>
		else max_days = 30;
 6ca:	9e e1       	ldi	r25, 0x1E	; 30
 6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <__vector_2+0xe8>
		clock_write(HR , MIN , SEC);		
	}
	// increasing days
	else if(mode == 4){
		BYTE max_days;
		if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) max_days = 31;
 6ce:	9f e1       	ldi	r25, 0x1F	; 31
 6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <__vector_2+0xe8>
 6d2:	9f e1       	ldi	r25, 0x1F	; 31
 6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <__vector_2+0xe8>
 6d6:	9f e1       	ldi	r25, 0x1F	; 31
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <__vector_2+0xe8>
 6da:	9f e1       	ldi	r25, 0x1F	; 31
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <__vector_2+0xe8>
 6de:	9f e1       	ldi	r25, 0x1F	; 31
 6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <__vector_2+0xe8>
		else if (MONTH == 2) max_days = 28;
 6e2:	9c e1       	ldi	r25, 0x1C	; 28
		else max_days = 30;
		
		if(DAY == max_days) {DAY = 1;}
 6e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 6e8:	98 13       	cpse	r25, r24
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__vector_2+0xf8>
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <DAY>
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <__vector_2+0xfe>
		else {DAY++;}
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <DAY>
		date_write(DAY,MONTH,YEAR);		
 6fa:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 6fe:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 702:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 706:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
 70a:	2a c0       	rjmp	.+84     	; 0x760 <__vector_2+0x164>
	}
	// increasing months
	else if(mode==5){
 70c:	85 30       	cpi	r24, 0x05	; 5
 70e:	b1 f4       	brne	.+44     	; 0x73c <__vector_2+0x140>
		if(MONTH==12) {MONTH = 1;}
 710:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <MONTH>
 714:	8c 30       	cpi	r24, 0x0C	; 12
 716:	21 f4       	brne	.+8      	; 0x720 <__vector_2+0x124>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <MONTH>
 71e:	03 c0       	rjmp	.+6      	; 0x726 <__vector_2+0x12a>
		else {MONTH++;}
 720:	8f 5f       	subi	r24, 0xFF	; 255
 722:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <MONTH>
		date_write(DAY,MONTH,YEAR);	
 726:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 72a:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 72e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 732:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 736:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
 73a:	12 c0       	rjmp	.+36     	; 0x760 <__vector_2+0x164>
	}
	// increasing years
	else if(mode==6){
 73c:	86 30       	cpi	r24, 0x06	; 6
 73e:	81 f4       	brne	.+32     	; 0x760 <__vector_2+0x164>
		YEAR++;
 740:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 744:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 748:	4f 5f       	subi	r20, 0xFF	; 255
 74a:	5f 4f       	sbci	r21, 0xFF	; 255
 74c:	50 93 6a 00 	sts	0x006A, r21	; 0x80006a <YEAR+0x1>
 750:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <YEAR>
		date_write(DAY,MONTH,YEAR);
 754:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 758:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 75c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
	}
	
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_18>:

// Decrement Bottom
ISR(INT2_vect){
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
	// decreasing hours
	if(mode == 1){
 7a4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 7a8:	81 30       	cpi	r24, 0x01	; 1
 7aa:	a1 f4       	brne	.+40     	; 0x7d4 <__vector_18+0x52>
		if(HR == 1) {HR = 12;}
 7ac:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	21 f4       	brne	.+8      	; 0x7bc <__vector_18+0x3a>
 7b4:	8c e0       	ldi	r24, 0x0C	; 12
 7b6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <HR>
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <__vector_18+0x40>
		else {HR--;}
 7bc:	81 50       	subi	r24, 0x01	; 1
 7be:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <HR>
		clock_write(HR , MIN , SEC);
 7c2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 7c6:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 7ca:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 7ce:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
 7d2:	8a c0       	rjmp	.+276    	; 0x8e8 <__vector_18+0x166>
	}
	// decreasing minuets
	else if(mode == 2){
 7d4:	82 30       	cpi	r24, 0x02	; 2
 7d6:	a1 f4       	brne	.+40     	; 0x800 <__vector_18+0x7e>
		if(MIN == 0) {MIN = 59;}
 7d8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <MIN>
 7dc:	81 11       	cpse	r24, r1
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__vector_18+0x66>
 7e0:	8b e3       	ldi	r24, 0x3B	; 59
 7e2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <MIN>
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <__vector_18+0x6c>
		else {MIN--;}
 7e8:	81 50       	subi	r24, 0x01	; 1
 7ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <MIN>
		clock_write(HR , MIN , SEC);
 7ee:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 7f2:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 7f6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 7fa:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
 7fe:	74 c0       	rjmp	.+232    	; 0x8e8 <__vector_18+0x166>
	}
	// decreasing hours
	else if(mode == 3){
 800:	83 30       	cpi	r24, 0x03	; 3
 802:	a1 f4       	brne	.+40     	; 0x82c <__vector_18+0xaa>
		if(SEC == 0) {SEC = 59;}
 804:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SEC>
 808:	81 11       	cpse	r24, r1
 80a:	04 c0       	rjmp	.+8      	; 0x814 <__vector_18+0x92>
 80c:	8b e3       	ldi	r24, 0x3B	; 59
 80e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SEC>
 812:	03 c0       	rjmp	.+6      	; 0x81a <__vector_18+0x98>
		else {SEC --;}
 814:	81 50       	subi	r24, 0x01	; 1
 816:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SEC>
		clock_write(HR , MIN , SEC);		
 81a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 81e:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 822:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 826:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
 82a:	5e c0       	rjmp	.+188    	; 0x8e8 <__vector_18+0x166>
	}
	// decreasing days
	else if(mode == 4){
 82c:	84 30       	cpi	r24, 0x04	; 4
 82e:	91 f5       	brne	.+100    	; 0x894 <__vector_18+0x112>
		BYTE max_days;
		if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) max_days = 31;
 830:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 834:	86 2f       	mov	r24, r22
 836:	8d 7f       	andi	r24, 0xFD	; 253
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	71 f0       	breq	.+28     	; 0x858 <__vector_18+0xd6>
 83c:	65 30       	cpi	r22, 0x05	; 5
 83e:	71 f0       	breq	.+28     	; 0x85c <__vector_18+0xda>
 840:	89 ef       	ldi	r24, 0xF9	; 249
 842:	86 0f       	add	r24, r22
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	60 f0       	brcs	.+24     	; 0x860 <__vector_18+0xde>
 848:	6a 30       	cpi	r22, 0x0A	; 10
 84a:	61 f0       	breq	.+24     	; 0x864 <__vector_18+0xe2>
 84c:	6c 30       	cpi	r22, 0x0C	; 12
 84e:	61 f0       	breq	.+24     	; 0x868 <__vector_18+0xe6>
		else if (MONTH == 2) max_days = 28;
 850:	62 30       	cpi	r22, 0x02	; 2
 852:	61 f0       	breq	.+24     	; 0x86c <__vector_18+0xea>
		else max_days = 30;
 854:	9e e1       	ldi	r25, 0x1E	; 30
 856:	0b c0       	rjmp	.+22     	; 0x86e <__vector_18+0xec>
		clock_write(HR , MIN , SEC);		
	}
	// decreasing days
	else if(mode == 4){
		BYTE max_days;
		if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) max_days = 31;
 858:	9f e1       	ldi	r25, 0x1F	; 31
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__vector_18+0xec>
 85c:	9f e1       	ldi	r25, 0x1F	; 31
 85e:	07 c0       	rjmp	.+14     	; 0x86e <__vector_18+0xec>
 860:	9f e1       	ldi	r25, 0x1F	; 31
 862:	05 c0       	rjmp	.+10     	; 0x86e <__vector_18+0xec>
 864:	9f e1       	ldi	r25, 0x1F	; 31
 866:	03 c0       	rjmp	.+6      	; 0x86e <__vector_18+0xec>
 868:	9f e1       	ldi	r25, 0x1F	; 31
 86a:	01 c0       	rjmp	.+2      	; 0x86e <__vector_18+0xec>
		else if (MONTH == 2) max_days = 28;
 86c:	9c e1       	ldi	r25, 0x1C	; 28
		else max_days = 30;
		
		if(DAY == 1) {DAY = max_days;}
 86e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 872:	81 30       	cpi	r24, 0x01	; 1
 874:	19 f4       	brne	.+6      	; 0x87c <__vector_18+0xfa>
 876:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <DAY>
 87a:	03 c0       	rjmp	.+6      	; 0x882 <__vector_18+0x100>
		else {DAY--;}
 87c:	81 50       	subi	r24, 0x01	; 1
 87e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <DAY>
		date_write(DAY,MONTH,YEAR);
 882:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 886:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 88a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 88e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
 892:	2a c0       	rjmp	.+84     	; 0x8e8 <__vector_18+0x166>
	}
	// decreasing months
	else if(mode==5){
 894:	85 30       	cpi	r24, 0x05	; 5
 896:	b1 f4       	brne	.+44     	; 0x8c4 <__vector_18+0x142>
		if(MONTH==1) {MONTH = 12;}
 898:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <MONTH>
 89c:	81 30       	cpi	r24, 0x01	; 1
 89e:	21 f4       	brne	.+8      	; 0x8a8 <__vector_18+0x126>
 8a0:	8c e0       	ldi	r24, 0x0C	; 12
 8a2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <MONTH>
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <__vector_18+0x12c>
		else {MONTH--;}
 8a8:	81 50       	subi	r24, 0x01	; 1
 8aa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <MONTH>
		date_write(DAY,MONTH,YEAR);
 8ae:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 8b2:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 8b6:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 8ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 8be:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
 8c2:	12 c0       	rjmp	.+36     	; 0x8e8 <__vector_18+0x166>
	}
	// decreasing years
	else if(mode==6){
 8c4:	86 30       	cpi	r24, 0x06	; 6
 8c6:	81 f4       	brne	.+32     	; 0x8e8 <__vector_18+0x166>
		YEAR--;
 8c8:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 8cc:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 8d0:	41 50       	subi	r20, 0x01	; 1
 8d2:	51 09       	sbc	r21, r1
 8d4:	50 93 6a 00 	sts	0x006A, r21	; 0x80006a <YEAR+0x1>
 8d8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <YEAR>
		date_write(DAY,MONTH,YEAR);
 8dc:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 8e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 8e4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
	}		
	
}
 8e8:	ff 91       	pop	r31
 8ea:	ef 91       	pop	r30
 8ec:	bf 91       	pop	r27
 8ee:	af 91       	pop	r26
 8f0:	9f 91       	pop	r25
 8f2:	8f 91       	pop	r24
 8f4:	7f 91       	pop	r23
 8f6:	6f 91       	pop	r22
 8f8:	5f 91       	pop	r21
 8fa:	4f 91       	pop	r20
 8fc:	3f 91       	pop	r19
 8fe:	2f 91       	pop	r18
 900:	0f 90       	pop	r0
 902:	0f be       	out	0x3f, r0	; 63
 904:	0f 90       	pop	r0
 906:	1f 90       	pop	r1
 908:	18 95       	reti

0000090a <interrupt_init>:

void interrupt_init(){
	SREG |= (1<<7); // Enable global interrupt 
 90a:	8f b7       	in	r24, 0x3f	; 63
 90c:	80 68       	ori	r24, 0x80	; 128
 90e:	8f bf       	out	0x3f, r24	; 63
	// Enable INT0 for rising edge
	MCUCR |= (1<<0);
 910:	85 b7       	in	r24, 0x35	; 53
 912:	81 60       	ori	r24, 0x01	; 1
 914:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<1);
 916:	85 b7       	in	r24, 0x35	; 53
 918:	82 60       	ori	r24, 0x02	; 2
 91a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<3);
 91c:	85 b7       	in	r24, 0x35	; 53
 91e:	88 60       	ori	r24, 0x08	; 8
 920:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<2);
 922:	85 b7       	in	r24, 0x35	; 53
 924:	84 60       	ori	r24, 0x04	; 4
 926:	85 bf       	out	0x35, r24	; 53
	MCUCSR|= (1<<6);
 928:	84 b7       	in	r24, 0x34	; 52
 92a:	80 64       	ori	r24, 0x40	; 64
 92c:	84 bf       	out	0x34, r24	; 52
	
	GICR |= (1<<5);
 92e:	8b b7       	in	r24, 0x3b	; 59
 930:	80 62       	ori	r24, 0x20	; 32
 932:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<6);
 934:	8b b7       	in	r24, 0x3b	; 59
 936:	80 64       	ori	r24, 0x40	; 64
 938:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<7);
 93a:	8b b7       	in	r24, 0x3b	; 59
 93c:	80 68       	ori	r24, 0x80	; 128
 93e:	8b bf       	out	0x3b, r24	; 59
 940:	08 95       	ret

00000942 <LCD_cmd>:
	while(data[i] != '\0'){
		LCD_write_char(data[i]);
		i++;
	}
	
}
 942:	68 2f       	mov	r22, r24
 944:	81 e4       	ldi	r24, 0x41	; 65
 946:	0e 94 b0 02 	call	0x560	; 0x560 <port_write>
 94a:	40 e0       	ldi	r20, 0x00	; 0
 94c:	65 e0       	ldi	r22, 0x05	; 5
 94e:	82 e4       	ldi	r24, 0x42	; 66
 950:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 954:	40 e0       	ldi	r20, 0x00	; 0
 956:	66 e0       	ldi	r22, 0x06	; 6
 958:	82 e4       	ldi	r24, 0x42	; 66
 95a:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 95e:	41 e0       	ldi	r20, 0x01	; 1
 960:	67 e0       	ldi	r22, 0x07	; 7
 962:	82 e4       	ldi	r24, 0x42	; 66
 964:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 968:	8c ec       	ldi	r24, 0xCC	; 204
 96a:	9a e0       	ldi	r25, 0x0A	; 10
 96c:	01 97       	sbiw	r24, 0x01	; 1
 96e:	f1 f7       	brne	.-4      	; 0x96c <LCD_cmd+0x2a>
 970:	00 c0       	rjmp	.+0      	; 0x972 <LCD_cmd+0x30>
 972:	00 00       	nop
 974:	40 e0       	ldi	r20, 0x00	; 0
 976:	67 e0       	ldi	r22, 0x07	; 7
 978:	82 e4       	ldi	r24, 0x42	; 66
 97a:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 97e:	86 e6       	ldi	r24, 0x66	; 102
 980:	90 e2       	ldi	r25, 0x20	; 32
 982:	01 97       	sbiw	r24, 0x01	; 1
 984:	f1 f7       	brne	.-4      	; 0x982 <LCD_cmd+0x40>
 986:	00 00       	nop
 988:	08 95       	ret

0000098a <LCD_init>:
 98a:	41 e0       	ldi	r20, 0x01	; 1
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	81 e4       	ldi	r24, 0x41	; 65
 990:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 994:	41 e0       	ldi	r20, 0x01	; 1
 996:	61 e0       	ldi	r22, 0x01	; 1
 998:	81 e4       	ldi	r24, 0x41	; 65
 99a:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 99e:	41 e0       	ldi	r20, 0x01	; 1
 9a0:	62 e0       	ldi	r22, 0x02	; 2
 9a2:	81 e4       	ldi	r24, 0x41	; 65
 9a4:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9a8:	41 e0       	ldi	r20, 0x01	; 1
 9aa:	63 e0       	ldi	r22, 0x03	; 3
 9ac:	81 e4       	ldi	r24, 0x41	; 65
 9ae:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9b2:	41 e0       	ldi	r20, 0x01	; 1
 9b4:	64 e0       	ldi	r22, 0x04	; 4
 9b6:	81 e4       	ldi	r24, 0x41	; 65
 9b8:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9bc:	41 e0       	ldi	r20, 0x01	; 1
 9be:	65 e0       	ldi	r22, 0x05	; 5
 9c0:	81 e4       	ldi	r24, 0x41	; 65
 9c2:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9c6:	41 e0       	ldi	r20, 0x01	; 1
 9c8:	66 e0       	ldi	r22, 0x06	; 6
 9ca:	81 e4       	ldi	r24, 0x41	; 65
 9cc:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9d0:	41 e0       	ldi	r20, 0x01	; 1
 9d2:	67 e0       	ldi	r22, 0x07	; 7
 9d4:	81 e4       	ldi	r24, 0x41	; 65
 9d6:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9da:	41 e0       	ldi	r20, 0x01	; 1
 9dc:	65 e0       	ldi	r22, 0x05	; 5
 9de:	82 e4       	ldi	r24, 0x42	; 66
 9e0:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9e4:	41 e0       	ldi	r20, 0x01	; 1
 9e6:	66 e0       	ldi	r22, 0x06	; 6
 9e8:	82 e4       	ldi	r24, 0x42	; 66
 9ea:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9ee:	41 e0       	ldi	r20, 0x01	; 1
 9f0:	67 e0       	ldi	r22, 0x07	; 7
 9f2:	82 e4       	ldi	r24, 0x42	; 66
 9f4:	0e 94 c0 01 	call	0x380	; 0x380 <pin_mode>
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	97 ed       	ldi	r25, 0xD7	; 215
 9fc:	01 97       	sbiw	r24, 0x01	; 1
 9fe:	f1 f7       	brne	.-4      	; 0x9fc <LCD_init+0x72>
 a00:	00 c0       	rjmp	.+0      	; 0xa02 <LCD_init+0x78>
 a02:	00 00       	nop
 a04:	88 e3       	ldi	r24, 0x38	; 56
 a06:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_cmd>
 a0a:	8c e0       	ldi	r24, 0x0C	; 12
 a0c:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_cmd>
 a10:	86 e0       	ldi	r24, 0x06	; 6
 a12:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_cmd>
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_cmd>
 a1c:	80 e8       	ldi	r24, 0x80	; 128
 a1e:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_cmd>
 a22:	08 95       	ret

00000a24 <LCD_write_char>:
 a24:	68 2f       	mov	r22, r24
 a26:	81 e4       	ldi	r24, 0x41	; 65
 a28:	0e 94 b0 02 	call	0x560	; 0x560 <port_write>
 a2c:	45 e0       	ldi	r20, 0x05	; 5
 a2e:	60 e0       	ldi	r22, 0x00	; 0
 a30:	82 e4       	ldi	r24, 0x42	; 66
 a32:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 a36:	46 e0       	ldi	r20, 0x06	; 6
 a38:	61 e0       	ldi	r22, 0x01	; 1
 a3a:	82 e4       	ldi	r24, 0x42	; 66
 a3c:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 a40:	41 e0       	ldi	r20, 0x01	; 1
 a42:	67 e0       	ldi	r22, 0x07	; 7
 a44:	82 e4       	ldi	r24, 0x42	; 66
 a46:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 a4a:	8c ec       	ldi	r24, 0xCC	; 204
 a4c:	9a e0       	ldi	r25, 0x0A	; 10
 a4e:	01 97       	sbiw	r24, 0x01	; 1
 a50:	f1 f7       	brne	.-4      	; 0xa4e <LCD_write_char+0x2a>
 a52:	00 c0       	rjmp	.+0      	; 0xa54 <LCD_write_char+0x30>
 a54:	00 00       	nop
 a56:	40 e0       	ldi	r20, 0x00	; 0
 a58:	67 e0       	ldi	r22, 0x07	; 7
 a5a:	82 e4       	ldi	r24, 0x42	; 66
 a5c:	0e 94 38 02 	call	0x470	; 0x470 <pin_write>
 a60:	86 e6       	ldi	r24, 0x66	; 102
 a62:	90 e2       	ldi	r25, 0x20	; 32
 a64:	01 97       	sbiw	r24, 0x01	; 1
 a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_write_char+0x40>
 a68:	00 00       	nop
 a6a:	08 95       	ret

00000a6c <LCD_startfrom>:

void LCD_startfrom(BYTE row , BYTE pos){
	if (row != 1 && row!=2) return;
 a6c:	9f ef       	ldi	r25, 0xFF	; 255
 a6e:	98 0f       	add	r25, r24
 a70:	92 30       	cpi	r25, 0x02	; 2
 a72:	88 f4       	brcc	.+34     	; 0xa96 <LCD_startfrom+0x2a>
	if (pos>16) return;
 a74:	61 31       	cpi	r22, 0x11	; 17
 a76:	78 f4       	brcc	.+30     	; 0xa96 <LCD_startfrom+0x2a>
	
	if (row == 1) LCD_cmd((pos & 0x0F) | 0x80);
 a78:	81 30       	cpi	r24, 0x01	; 1
 a7a:	31 f4       	brne	.+12     	; 0xa88 <LCD_startfrom+0x1c>
 a7c:	86 2f       	mov	r24, r22
 a7e:	8f 70       	andi	r24, 0x0F	; 15
 a80:	80 68       	ori	r24, 0x80	; 128
 a82:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_cmd>
 a86:	08 95       	ret
	else if (row == 2) LCD_cmd((pos & 0x0F) | 0xC0);
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	29 f4       	brne	.+10     	; 0xa96 <LCD_startfrom+0x2a>
 a8c:	86 2f       	mov	r24, r22
 a8e:	8f 70       	andi	r24, 0x0F	; 15
 a90:	80 6c       	ori	r24, 0xC0	; 192
 a92:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_cmd>
 a96:	08 95       	ret

00000a98 <main>:
#include <util/delay.h>
#include "schedular.h"

int main(void)
{
	start();
 a98:	0e 94 51 05 	call	0xaa2	; 0xaa2 <start>
	while (1){
		engine();
 a9c:	0e 94 86 05 	call	0xb0c	; 0xb0c <engine>
 aa0:	fd cf       	rjmp	.-6      	; 0xa9c <main+0x4>

00000aa2 <start>:
BYTE previous_time;

BYTE flag;

void start(){
	mode = 0;
 aa2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <mode>
	
	HR = 11;
 aa6:	8b e0       	ldi	r24, 0x0B	; 11
 aa8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <HR>
	MIN = 24;
 aac:	88 e1       	ldi	r24, 0x18	; 24
 aae:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <MIN>
	SEC = 00;
 ab2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <SEC>
	
	DAY = 30;
 ab6:	8e e1       	ldi	r24, 0x1E	; 30
 ab8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <DAY>
	MONTH = 4;
 abc:	84 e0       	ldi	r24, 0x04	; 4
 abe:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <MONTH>
	YEAR = 2000;
 ac2:	80 ed       	ldi	r24, 0xD0	; 208
 ac4:	97 e0       	ldi	r25, 0x07	; 7
 ac6:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <YEAR+0x1>
 aca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <YEAR>
	
	TIME = PM;
 ace:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	previous_time = TIME;
 ad2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <previous_time>
	
	flag = 0;
 ad6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag>
	LCD_init();
 ada:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_init>
	interrupt_init();
 ade:	0e 94 85 04 	call	0x90a	; 0x90a <interrupt_init>
	timer_init();
 ae2:	0e 94 3a 06 	call	0xc74	; 0xc74 <timer_init>
	clock_write(HR,MIN,SEC);
 ae6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 aea:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 aee:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 af2:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
	date_write(DAY,MONTH,YEAR);
 af6:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 afa:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 afe:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 b02:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 b06:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
 b0a:	08 95       	ret

00000b0c <engine>:
}

void engine(){
	if(mode == 0){
 b0c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 b10:	81 11       	cpse	r24, r1
 b12:	96 c0       	rjmp	.+300    	; 0xc40 <engine+0x134>
		if(flag == 1) {// one second
 b14:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flag>
 b18:	81 30       	cpi	r24, 0x01	; 1
 b1a:	09 f0       	breq	.+2      	; 0xb1e <engine+0x12>
 b1c:	91 c0       	rjmp	.+290    	; 0xc40 <engine+0x134>
			SEC++;
 b1e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SEC>
 b22:	8f 5f       	subi	r24, 0xFF	; 255
 b24:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SEC>
			flag=0;	
 b28:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag>
			if(SEC == 60){
 b2c:	8c 33       	cpi	r24, 0x3C	; 60
 b2e:	39 f4       	brne	.+14     	; 0xb3e <engine+0x32>
				MIN++;
 b30:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <MIN>
 b34:	8f 5f       	subi	r24, 0xFF	; 255
 b36:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <MIN>
				SEC=0;
 b3a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <SEC>
			}
				
			if (MIN > 59){
 b3e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <MIN>
 b42:	8c 33       	cpi	r24, 0x3C	; 60
 b44:	38 f0       	brcs	.+14     	; 0xb54 <engine+0x48>
				HR++;
 b46:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 b4a:	8f 5f       	subi	r24, 0xFF	; 255
 b4c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <HR>
				MIN=0;
 b50:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <MIN>
			}
		
			if (HR > 12){
 b54:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 b58:	8d 30       	cpi	r24, 0x0D	; 13
 b5a:	20 f0       	brcs	.+8      	; 0xb64 <engine+0x58>
				HR=1;
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <HR>
 b62:	13 c0       	rjmp	.+38     	; 0xb8a <engine+0x7e>
			}
			
			if(HR == 12){
 b64:	8c 30       	cpi	r24, 0x0C	; 12
 b66:	89 f4       	brne	.+34     	; 0xb8a <engine+0x7e>
				if(TIME==AM) {TIME = PM;}
 b68:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 b6c:	81 30       	cpi	r24, 0x01	; 1
 b6e:	19 f4       	brne	.+6      	; 0xb76 <engine+0x6a>
 b70:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 b74:	53 c0       	rjmp	.+166    	; 0xc1c <engine+0x110>
				else if(TIME == PM) {TIME = AM;}
 b76:	81 11       	cpse	r24, r1
 b78:	51 c0       	rjmp	.+162    	; 0xc1c <engine+0x110>
 b7a:	81 e0       	ldi	r24, 0x01	; 1
 b7c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			}
			
			if(previous_time == PM && TIME == AM) {//new day
 b80:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <previous_time>
 b84:	88 23       	and	r24, r24
 b86:	51 f0       	breq	.+20     	; 0xb9c <engine+0x90>
 b88:	49 c0       	rjmp	.+146    	; 0xc1c <engine+0x110>
 b8a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <previous_time>
 b8e:	81 11       	cpse	r24, r1
 b90:	45 c0       	rjmp	.+138    	; 0xc1c <engine+0x110>
 b92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 b96:	81 30       	cpi	r24, 0x01	; 1
 b98:	09 f0       	breq	.+2      	; 0xb9c <engine+0x90>
 b9a:	40 c0       	rjmp	.+128    	; 0xc1c <engine+0x110>
				previous_time = TIME;
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <previous_time>
				BYTE max_days;
				if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) {//31 days in these months
 ba2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <MONTH>
 ba6:	89 2f       	mov	r24, r25
 ba8:	8d 7f       	andi	r24, 0xFD	; 253
 baa:	81 30       	cpi	r24, 0x01	; 1
 bac:	71 f0       	breq	.+28     	; 0xbca <engine+0xbe>
 bae:	95 30       	cpi	r25, 0x05	; 5
 bb0:	71 f0       	breq	.+28     	; 0xbce <engine+0xc2>
 bb2:	89 ef       	ldi	r24, 0xF9	; 249
 bb4:	89 0f       	add	r24, r25
 bb6:	82 30       	cpi	r24, 0x02	; 2
 bb8:	60 f0       	brcs	.+24     	; 0xbd2 <engine+0xc6>
 bba:	9a 30       	cpi	r25, 0x0A	; 10
 bbc:	61 f0       	breq	.+24     	; 0xbd6 <engine+0xca>
 bbe:	9c 30       	cpi	r25, 0x0C	; 12
 bc0:	61 f0       	breq	.+24     	; 0xbda <engine+0xce>
				max_days=31;
				}
				else if(MONTH==2) max_days = 28;
 bc2:	92 30       	cpi	r25, 0x02	; 2
 bc4:	61 f0       	breq	.+24     	; 0xbde <engine+0xd2>
				else max_days = 30;
 bc6:	2e e1       	ldi	r18, 0x1E	; 30
 bc8:	0b c0       	rjmp	.+22     	; 0xbe0 <engine+0xd4>
			
			if(previous_time == PM && TIME == AM) {//new day
				previous_time = TIME;
				BYTE max_days;
				if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) {//31 days in these months
				max_days=31;
 bca:	2f e1       	ldi	r18, 0x1F	; 31
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <engine+0xd4>
 bce:	2f e1       	ldi	r18, 0x1F	; 31
 bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <engine+0xd4>
 bd2:	2f e1       	ldi	r18, 0x1F	; 31
 bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <engine+0xd4>
 bd6:	2f e1       	ldi	r18, 0x1F	; 31
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <engine+0xd4>
 bda:	2f e1       	ldi	r18, 0x1F	; 31
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <engine+0xd4>
				}
				else if(MONTH==2) max_days = 28;
 bde:	2c e1       	ldi	r18, 0x1C	; 28
				else max_days = 30;

				if (DAY==max_days)
 be0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 be4:	28 13       	cpse	r18, r24
 be6:	07 c0       	rjmp	.+14     	; 0xbf6 <engine+0xea>
				{
					MONTH++;
 be8:	9f 5f       	subi	r25, 0xFF	; 255
 bea:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <MONTH>
					DAY = 1;
 bee:	81 e0       	ldi	r24, 0x01	; 1
 bf0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <DAY>
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <engine+0xf0>
				}
				else {DAY++;}
 bf6:	8f 5f       	subi	r24, 0xFF	; 255
 bf8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <DAY>
				
				if(MONTH == 12){
 bfc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <MONTH>
 c00:	8c 30       	cpi	r24, 0x0C	; 12
 c02:	61 f4       	brne	.+24     	; 0xc1c <engine+0x110>
					YEAR++;
 c04:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <YEAR>
 c08:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <YEAR+0x1>
 c0c:	01 96       	adiw	r24, 0x01	; 1
 c0e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <YEAR+0x1>
 c12:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <YEAR>
					MONTH = 1;
 c16:	81 e0       	ldi	r24, 0x01	; 1
 c18:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <MONTH>
				}
			}
	
			clock_write(HR,MIN,SEC);
 c1c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <SEC>
 c20:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <MIN>
 c24:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <HR>
 c28:	0e 94 3e 00 	call	0x7c	; 0x7c <clock_write>
			date_write(DAY,MONTH,YEAR);
 c2c:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <YEAR>
 c30:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <YEAR+0x1>
 c34:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MONTH>
 c38:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <DAY>
 c3c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <date_write>
 c40:	08 95       	ret

00000c42 <__vector_19>:
#include <avr/interrupt.h>

extern BYTE flag;
BYTE tick;

ISR(TIMER0_COMP_vect){
 c42:	1f 92       	push	r1
 c44:	0f 92       	push	r0
 c46:	0f b6       	in	r0, 0x3f	; 63
 c48:	0f 92       	push	r0
 c4a:	11 24       	eor	r1, r1
 c4c:	8f 93       	push	r24
	if(tick==100){
 c4e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tick>
 c52:	84 36       	cpi	r24, 0x64	; 100
 c54:	31 f4       	brne	.+12     	; 0xc62 <__vector_19+0x20>
		flag = 1;
 c56:	81 e0       	ldi	r24, 0x01	; 1
 c58:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <flag>
		tick = 0;
 c5c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tick>
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <__vector_19+0x26>
	}
	else{tick++;}
 c62:	8f 5f       	subi	r24, 0xFF	; 255
 c64:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <tick>
}
 c68:	8f 91       	pop	r24
 c6a:	0f 90       	pop	r0
 c6c:	0f be       	out	0x3f, r0	; 63
 c6e:	0f 90       	pop	r0
 c70:	1f 90       	pop	r1
 c72:	18 95       	reti

00000c74 <timer_init>:

void timer_init(){
	tick = 0;
 c74:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tick>
	SREG |= (1<<7);  // Enable global interrupt 
 c78:	8f b7       	in	r24, 0x3f	; 63
 c7a:	80 68       	ori	r24, 0x80	; 128
 c7c:	8f bf       	out	0x3f, r24	; 63
	TIMSK |= (1<<1); // Enable Timer interrupt
 c7e:	89 b7       	in	r24, 0x39	; 57
 c80:	82 60       	ori	r24, 0x02	; 2
 c82:	89 bf       	out	0x39, r24	; 57
	// SET CTC MODE
	TCCR0 &= ~(1<<6);
 c84:	83 b7       	in	r24, 0x33	; 51
 c86:	8f 7b       	andi	r24, 0xBF	; 191
 c88:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<3);
 c8a:	83 b7       	in	r24, 0x33	; 51
 c8c:	88 60       	ori	r24, 0x08	; 8
 c8e:	83 bf       	out	0x33, r24	; 51
	// SET COUNTER CLOCK
	TCCR0 |= (1<<0); 
 c90:	83 b7       	in	r24, 0x33	; 51
 c92:	81 60       	ori	r24, 0x01	; 1
 c94:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<1);
 c96:	83 b7       	in	r24, 0x33	; 51
 c98:	8d 7f       	andi	r24, 0xFD	; 253
 c9a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<2);  
 c9c:	83 b7       	in	r24, 0x33	; 51
 c9e:	84 60       	ori	r24, 0x04	; 4
 ca0:	83 bf       	out	0x33, r24	; 51
	// SET COMPARING VALUE
	OCR0 = 8;	
 ca2:	88 e0       	ldi	r24, 0x08	; 8
 ca4:	8c bf       	out	0x3c, r24	; 60
 ca6:	08 95       	ret

00000ca8 <__divsf3>:
 ca8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__divsf3x>
 cac:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_round>
 cb0:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_pscB>
 cb4:	58 f0       	brcs	.+22     	; 0xccc <__divsf3+0x24>
 cb6:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscA>
 cba:	40 f0       	brcs	.+16     	; 0xccc <__divsf3+0x24>
 cbc:	29 f4       	brne	.+10     	; 0xcc8 <__divsf3+0x20>
 cbe:	5f 3f       	cpi	r21, 0xFF	; 255
 cc0:	29 f0       	breq	.+10     	; 0xccc <__divsf3+0x24>
 cc2:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 cc6:	51 11       	cpse	r21, r1
 cc8:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_szero>
 ccc:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_nan>

00000cd0 <__divsf3x>:
 cd0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_split3>
 cd4:	68 f3       	brcs	.-38     	; 0xcb0 <__divsf3+0x8>

00000cd6 <__divsf3_pse>:
 cd6:	99 23       	and	r25, r25
 cd8:	b1 f3       	breq	.-20     	; 0xcc6 <__divsf3+0x1e>
 cda:	55 23       	and	r21, r21
 cdc:	91 f3       	breq	.-28     	; 0xcc2 <__divsf3+0x1a>
 cde:	95 1b       	sub	r25, r21
 ce0:	55 0b       	sbc	r21, r21
 ce2:	bb 27       	eor	r27, r27
 ce4:	aa 27       	eor	r26, r26
 ce6:	62 17       	cp	r22, r18
 ce8:	73 07       	cpc	r23, r19
 cea:	84 07       	cpc	r24, r20
 cec:	38 f0       	brcs	.+14     	; 0xcfc <__divsf3_pse+0x26>
 cee:	9f 5f       	subi	r25, 0xFF	; 255
 cf0:	5f 4f       	sbci	r21, 0xFF	; 255
 cf2:	22 0f       	add	r18, r18
 cf4:	33 1f       	adc	r19, r19
 cf6:	44 1f       	adc	r20, r20
 cf8:	aa 1f       	adc	r26, r26
 cfa:	a9 f3       	breq	.-22     	; 0xce6 <__divsf3_pse+0x10>
 cfc:	35 d0       	rcall	.+106    	; 0xd68 <__divsf3_pse+0x92>
 cfe:	0e 2e       	mov	r0, r30
 d00:	3a f0       	brmi	.+14     	; 0xd10 <__divsf3_pse+0x3a>
 d02:	e0 e8       	ldi	r30, 0x80	; 128
 d04:	32 d0       	rcall	.+100    	; 0xd6a <__divsf3_pse+0x94>
 d06:	91 50       	subi	r25, 0x01	; 1
 d08:	50 40       	sbci	r21, 0x00	; 0
 d0a:	e6 95       	lsr	r30
 d0c:	00 1c       	adc	r0, r0
 d0e:	ca f7       	brpl	.-14     	; 0xd02 <__divsf3_pse+0x2c>
 d10:	2b d0       	rcall	.+86     	; 0xd68 <__divsf3_pse+0x92>
 d12:	fe 2f       	mov	r31, r30
 d14:	29 d0       	rcall	.+82     	; 0xd68 <__divsf3_pse+0x92>
 d16:	66 0f       	add	r22, r22
 d18:	77 1f       	adc	r23, r23
 d1a:	88 1f       	adc	r24, r24
 d1c:	bb 1f       	adc	r27, r27
 d1e:	26 17       	cp	r18, r22
 d20:	37 07       	cpc	r19, r23
 d22:	48 07       	cpc	r20, r24
 d24:	ab 07       	cpc	r26, r27
 d26:	b0 e8       	ldi	r27, 0x80	; 128
 d28:	09 f0       	breq	.+2      	; 0xd2c <__divsf3_pse+0x56>
 d2a:	bb 0b       	sbc	r27, r27
 d2c:	80 2d       	mov	r24, r0
 d2e:	bf 01       	movw	r22, r30
 d30:	ff 27       	eor	r31, r31
 d32:	93 58       	subi	r25, 0x83	; 131
 d34:	5f 4f       	sbci	r21, 0xFF	; 255
 d36:	3a f0       	brmi	.+14     	; 0xd46 <__divsf3_pse+0x70>
 d38:	9e 3f       	cpi	r25, 0xFE	; 254
 d3a:	51 05       	cpc	r21, r1
 d3c:	78 f0       	brcs	.+30     	; 0xd5c <__divsf3_pse+0x86>
 d3e:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 d42:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_szero>
 d46:	5f 3f       	cpi	r21, 0xFF	; 255
 d48:	e4 f3       	brlt	.-8      	; 0xd42 <__divsf3_pse+0x6c>
 d4a:	98 3e       	cpi	r25, 0xE8	; 232
 d4c:	d4 f3       	brlt	.-12     	; 0xd42 <__divsf3_pse+0x6c>
 d4e:	86 95       	lsr	r24
 d50:	77 95       	ror	r23
 d52:	67 95       	ror	r22
 d54:	b7 95       	ror	r27
 d56:	f7 95       	ror	r31
 d58:	9f 5f       	subi	r25, 0xFF	; 255
 d5a:	c9 f7       	brne	.-14     	; 0xd4e <__divsf3_pse+0x78>
 d5c:	88 0f       	add	r24, r24
 d5e:	91 1d       	adc	r25, r1
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret
 d68:	e1 e0       	ldi	r30, 0x01	; 1
 d6a:	66 0f       	add	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	bb 1f       	adc	r27, r27
 d72:	62 17       	cp	r22, r18
 d74:	73 07       	cpc	r23, r19
 d76:	84 07       	cpc	r24, r20
 d78:	ba 07       	cpc	r27, r26
 d7a:	20 f0       	brcs	.+8      	; 0xd84 <__divsf3_pse+0xae>
 d7c:	62 1b       	sub	r22, r18
 d7e:	73 0b       	sbc	r23, r19
 d80:	84 0b       	sbc	r24, r20
 d82:	ba 0b       	sbc	r27, r26
 d84:	ee 1f       	adc	r30, r30
 d86:	88 f7       	brcc	.-30     	; 0xd6a <__divsf3_pse+0x94>
 d88:	e0 95       	com	r30
 d8a:	08 95       	ret

00000d8c <__fixunssfsi>:
 d8c:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_splitA>
 d90:	88 f0       	brcs	.+34     	; 0xdb4 <__fixunssfsi+0x28>
 d92:	9f 57       	subi	r25, 0x7F	; 127
 d94:	98 f0       	brcs	.+38     	; 0xdbc <__fixunssfsi+0x30>
 d96:	b9 2f       	mov	r27, r25
 d98:	99 27       	eor	r25, r25
 d9a:	b7 51       	subi	r27, 0x17	; 23
 d9c:	b0 f0       	brcs	.+44     	; 0xdca <__fixunssfsi+0x3e>
 d9e:	e1 f0       	breq	.+56     	; 0xdd8 <__fixunssfsi+0x4c>
 da0:	66 0f       	add	r22, r22
 da2:	77 1f       	adc	r23, r23
 da4:	88 1f       	adc	r24, r24
 da6:	99 1f       	adc	r25, r25
 da8:	1a f0       	brmi	.+6      	; 0xdb0 <__fixunssfsi+0x24>
 daa:	ba 95       	dec	r27
 dac:	c9 f7       	brne	.-14     	; 0xda0 <__fixunssfsi+0x14>
 dae:	14 c0       	rjmp	.+40     	; 0xdd8 <__fixunssfsi+0x4c>
 db0:	b1 30       	cpi	r27, 0x01	; 1
 db2:	91 f0       	breq	.+36     	; 0xdd8 <__fixunssfsi+0x4c>
 db4:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fp_zero>
 db8:	b1 e0       	ldi	r27, 0x01	; 1
 dba:	08 95       	ret
 dbc:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_zero>
 dc0:	67 2f       	mov	r22, r23
 dc2:	78 2f       	mov	r23, r24
 dc4:	88 27       	eor	r24, r24
 dc6:	b8 5f       	subi	r27, 0xF8	; 248
 dc8:	39 f0       	breq	.+14     	; 0xdd8 <__fixunssfsi+0x4c>
 dca:	b9 3f       	cpi	r27, 0xF9	; 249
 dcc:	cc f3       	brlt	.-14     	; 0xdc0 <__fixunssfsi+0x34>
 dce:	86 95       	lsr	r24
 dd0:	77 95       	ror	r23
 dd2:	67 95       	ror	r22
 dd4:	b3 95       	inc	r27
 dd6:	d9 f7       	brne	.-10     	; 0xdce <__fixunssfsi+0x42>
 dd8:	3e f4       	brtc	.+14     	; 0xde8 <__fixunssfsi+0x5c>
 dda:	90 95       	com	r25
 ddc:	80 95       	com	r24
 dde:	70 95       	com	r23
 de0:	61 95       	neg	r22
 de2:	7f 4f       	sbci	r23, 0xFF	; 255
 de4:	8f 4f       	sbci	r24, 0xFF	; 255
 de6:	9f 4f       	sbci	r25, 0xFF	; 255
 de8:	08 95       	ret

00000dea <__floatunsisf>:
 dea:	e8 94       	clt
 dec:	09 c0       	rjmp	.+18     	; 0xe00 <__floatsisf+0x12>

00000dee <__floatsisf>:
 dee:	97 fb       	bst	r25, 7
 df0:	3e f4       	brtc	.+14     	; 0xe00 <__floatsisf+0x12>
 df2:	90 95       	com	r25
 df4:	80 95       	com	r24
 df6:	70 95       	com	r23
 df8:	61 95       	neg	r22
 dfa:	7f 4f       	sbci	r23, 0xFF	; 255
 dfc:	8f 4f       	sbci	r24, 0xFF	; 255
 dfe:	9f 4f       	sbci	r25, 0xFF	; 255
 e00:	99 23       	and	r25, r25
 e02:	a9 f0       	breq	.+42     	; 0xe2e <__floatsisf+0x40>
 e04:	f9 2f       	mov	r31, r25
 e06:	96 e9       	ldi	r25, 0x96	; 150
 e08:	bb 27       	eor	r27, r27
 e0a:	93 95       	inc	r25
 e0c:	f6 95       	lsr	r31
 e0e:	87 95       	ror	r24
 e10:	77 95       	ror	r23
 e12:	67 95       	ror	r22
 e14:	b7 95       	ror	r27
 e16:	f1 11       	cpse	r31, r1
 e18:	f8 cf       	rjmp	.-16     	; 0xe0a <__floatsisf+0x1c>
 e1a:	fa f4       	brpl	.+62     	; 0xe5a <__floatsisf+0x6c>
 e1c:	bb 0f       	add	r27, r27
 e1e:	11 f4       	brne	.+4      	; 0xe24 <__floatsisf+0x36>
 e20:	60 ff       	sbrs	r22, 0
 e22:	1b c0       	rjmp	.+54     	; 0xe5a <__floatsisf+0x6c>
 e24:	6f 5f       	subi	r22, 0xFF	; 255
 e26:	7f 4f       	sbci	r23, 0xFF	; 255
 e28:	8f 4f       	sbci	r24, 0xFF	; 255
 e2a:	9f 4f       	sbci	r25, 0xFF	; 255
 e2c:	16 c0       	rjmp	.+44     	; 0xe5a <__floatsisf+0x6c>
 e2e:	88 23       	and	r24, r24
 e30:	11 f0       	breq	.+4      	; 0xe36 <__floatsisf+0x48>
 e32:	96 e9       	ldi	r25, 0x96	; 150
 e34:	11 c0       	rjmp	.+34     	; 0xe58 <__floatsisf+0x6a>
 e36:	77 23       	and	r23, r23
 e38:	21 f0       	breq	.+8      	; 0xe42 <__floatsisf+0x54>
 e3a:	9e e8       	ldi	r25, 0x8E	; 142
 e3c:	87 2f       	mov	r24, r23
 e3e:	76 2f       	mov	r23, r22
 e40:	05 c0       	rjmp	.+10     	; 0xe4c <__floatsisf+0x5e>
 e42:	66 23       	and	r22, r22
 e44:	71 f0       	breq	.+28     	; 0xe62 <__floatsisf+0x74>
 e46:	96 e8       	ldi	r25, 0x86	; 134
 e48:	86 2f       	mov	r24, r22
 e4a:	70 e0       	ldi	r23, 0x00	; 0
 e4c:	60 e0       	ldi	r22, 0x00	; 0
 e4e:	2a f0       	brmi	.+10     	; 0xe5a <__floatsisf+0x6c>
 e50:	9a 95       	dec	r25
 e52:	66 0f       	add	r22, r22
 e54:	77 1f       	adc	r23, r23
 e56:	88 1f       	adc	r24, r24
 e58:	da f7       	brpl	.-10     	; 0xe50 <__floatsisf+0x62>
 e5a:	88 0f       	add	r24, r24
 e5c:	96 95       	lsr	r25
 e5e:	87 95       	ror	r24
 e60:	97 f9       	bld	r25, 7
 e62:	08 95       	ret

00000e64 <__fp_inf>:
 e64:	97 f9       	bld	r25, 7
 e66:	9f 67       	ori	r25, 0x7F	; 127
 e68:	80 e8       	ldi	r24, 0x80	; 128
 e6a:	70 e0       	ldi	r23, 0x00	; 0
 e6c:	60 e0       	ldi	r22, 0x00	; 0
 e6e:	08 95       	ret

00000e70 <__fp_nan>:
 e70:	9f ef       	ldi	r25, 0xFF	; 255
 e72:	80 ec       	ldi	r24, 0xC0	; 192
 e74:	08 95       	ret

00000e76 <__fp_pscA>:
 e76:	00 24       	eor	r0, r0
 e78:	0a 94       	dec	r0
 e7a:	16 16       	cp	r1, r22
 e7c:	17 06       	cpc	r1, r23
 e7e:	18 06       	cpc	r1, r24
 e80:	09 06       	cpc	r0, r25
 e82:	08 95       	ret

00000e84 <__fp_pscB>:
 e84:	00 24       	eor	r0, r0
 e86:	0a 94       	dec	r0
 e88:	12 16       	cp	r1, r18
 e8a:	13 06       	cpc	r1, r19
 e8c:	14 06       	cpc	r1, r20
 e8e:	05 06       	cpc	r0, r21
 e90:	08 95       	ret

00000e92 <__fp_round>:
 e92:	09 2e       	mov	r0, r25
 e94:	03 94       	inc	r0
 e96:	00 0c       	add	r0, r0
 e98:	11 f4       	brne	.+4      	; 0xe9e <__fp_round+0xc>
 e9a:	88 23       	and	r24, r24
 e9c:	52 f0       	brmi	.+20     	; 0xeb2 <__fp_round+0x20>
 e9e:	bb 0f       	add	r27, r27
 ea0:	40 f4       	brcc	.+16     	; 0xeb2 <__fp_round+0x20>
 ea2:	bf 2b       	or	r27, r31
 ea4:	11 f4       	brne	.+4      	; 0xeaa <__fp_round+0x18>
 ea6:	60 ff       	sbrs	r22, 0
 ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <__fp_round+0x20>
 eaa:	6f 5f       	subi	r22, 0xFF	; 255
 eac:	7f 4f       	sbci	r23, 0xFF	; 255
 eae:	8f 4f       	sbci	r24, 0xFF	; 255
 eb0:	9f 4f       	sbci	r25, 0xFF	; 255
 eb2:	08 95       	ret

00000eb4 <__fp_split3>:
 eb4:	57 fd       	sbrc	r21, 7
 eb6:	90 58       	subi	r25, 0x80	; 128
 eb8:	44 0f       	add	r20, r20
 eba:	55 1f       	adc	r21, r21
 ebc:	59 f0       	breq	.+22     	; 0xed4 <__fp_splitA+0x10>
 ebe:	5f 3f       	cpi	r21, 0xFF	; 255
 ec0:	71 f0       	breq	.+28     	; 0xede <__fp_splitA+0x1a>
 ec2:	47 95       	ror	r20

00000ec4 <__fp_splitA>:
 ec4:	88 0f       	add	r24, r24
 ec6:	97 fb       	bst	r25, 7
 ec8:	99 1f       	adc	r25, r25
 eca:	61 f0       	breq	.+24     	; 0xee4 <__fp_splitA+0x20>
 ecc:	9f 3f       	cpi	r25, 0xFF	; 255
 ece:	79 f0       	breq	.+30     	; 0xeee <__fp_splitA+0x2a>
 ed0:	87 95       	ror	r24
 ed2:	08 95       	ret
 ed4:	12 16       	cp	r1, r18
 ed6:	13 06       	cpc	r1, r19
 ed8:	14 06       	cpc	r1, r20
 eda:	55 1f       	adc	r21, r21
 edc:	f2 cf       	rjmp	.-28     	; 0xec2 <__fp_split3+0xe>
 ede:	46 95       	lsr	r20
 ee0:	f1 df       	rcall	.-30     	; 0xec4 <__fp_splitA>
 ee2:	08 c0       	rjmp	.+16     	; 0xef4 <__fp_splitA+0x30>
 ee4:	16 16       	cp	r1, r22
 ee6:	17 06       	cpc	r1, r23
 ee8:	18 06       	cpc	r1, r24
 eea:	99 1f       	adc	r25, r25
 eec:	f1 cf       	rjmp	.-30     	; 0xed0 <__fp_splitA+0xc>
 eee:	86 95       	lsr	r24
 ef0:	71 05       	cpc	r23, r1
 ef2:	61 05       	cpc	r22, r1
 ef4:	08 94       	sec
 ef6:	08 95       	ret

00000ef8 <__fp_zero>:
 ef8:	e8 94       	clt

00000efa <__fp_szero>:
 efa:	bb 27       	eor	r27, r27
 efc:	66 27       	eor	r22, r22
 efe:	77 27       	eor	r23, r23
 f00:	cb 01       	movw	r24, r22
 f02:	97 f9       	bld	r25, 7
 f04:	08 95       	ret

00000f06 <__umulhisi3>:
 f06:	a2 9f       	mul	r26, r18
 f08:	b0 01       	movw	r22, r0
 f0a:	b3 9f       	mul	r27, r19
 f0c:	c0 01       	movw	r24, r0
 f0e:	a3 9f       	mul	r26, r19
 f10:	70 0d       	add	r23, r0
 f12:	81 1d       	adc	r24, r1
 f14:	11 24       	eor	r1, r1
 f16:	91 1d       	adc	r25, r1
 f18:	b2 9f       	mul	r27, r18
 f1a:	70 0d       	add	r23, r0
 f1c:	81 1d       	adc	r24, r1
 f1e:	11 24       	eor	r1, r1
 f20:	91 1d       	adc	r25, r1
 f22:	08 95       	ret

00000f24 <_exit>:
 f24:	f8 94       	cli

00000f26 <__stop_program>:
 f26:	ff cf       	rjmp	.-2      	; 0xf26 <__stop_program>
